import sys
import requests

def init_db(url):
    # Create the taxonomy
    response = requests.post(url + '/type', json={'name': 'User', 'description': 'A cityzen',
                                                  'static_properties': {'name': {'type': 'string'}},
                                                  'dynamic_properties': {'heath_status': {'type': 'symbol', 'values': ['Low', 'Medium', 'High']},
                                                                         'physical_distress': {'type': 'symbol', 'values': ['Low', 'Medium', 'High']},
                                                                         #'physical_distress_triggering_factors': {'type': 'symbol', 'multiple': True},
                                                                         'mental_distress': {'type': 'symbol', 'values': ['Low', 'Medium', 'High']},
                                                                         'anxiety': {'type': 'symbol', 'values': ['Low', 'Medium', 'High']}}})
    user_type = response.json()

    response = requests.post(url + '/type', json={'name': 'Questionnaire', 'description': 'A questionnaire',
                                                  'static_properties': {'comorbidity': {'type': 'integer', 'min': 0, 'max': 5}}})

    response = requests.post(url + '/type', json={'name': 'CityArea', 'description': 'A city area',
                                                  'static_properties': {'name': {'type': 'string'},
                                                                        'rough_path': {'type': 'boolean'},
                                                                        'area': {'type': 'json', 'schema': {'$ref': '#/components/schemas/geometry'}}},
                                                  'dynamic_properties': {'pollution': {'type': 'symbol', 'values': ['Low', 'Medium', 'High']},
                                                                         'crowding': {'type': 'integer', 'min': 0, 'max': 20},
                                                                         'noise_pollution': {'type': 'integer', 'min': 0, 'max': 100}}})
    area_type = response.json()

    response = requests.post(url + '/type', json={'name': 'Sensor', 'description': 'A sensor',
                                                  'dynamic_properties': {'user': {'type': 'item', 'type_id': user_type['id']}}})
    sensor_type = response.json()

    response = requests.post(url + '/type', json={'name': 'BreathSensor', 'description': 'A breath sensor', 'parents': [sensor_type['id']],
                                                  'dynamic_properties': {'breath_rate': {'type': 'integer', 'min': 0, 'max': 50}}})
    breath_sensor_type = response.json()

    response = requests.post(url + '/type', json={'name': 'HypotensionSensor', 'description': 'A hypotension sensor', 'parents': [sensor_type['id']],
                                                  'dynamic_properties': {'hypotension_rate': {'type': 'integer', 'min': 0, 'max': 200}}})
    hypotension_sensor_type = response.json()

    # Create the rules
    response = requests.post(url + '/reactive_rule', json={'name': 'physical_distress_rule',
                                                           'content': '(defrule physical_distress_rule (CityArea_has_noise_pollution (item_id ?area) (noise_pollution ?noise_pollution)) (User_has_physical_distress (item_id ?user)) => (bind ?distress_level 0) (if (>= ?noise_pollution 45) then (bind ?distress_level (+ ?distress_level 1))) (if (>= ?distress_level 1) then (add_data ?user (create$ physical_distress) (create$ ?distress_level))))'})
    physical_distress_rule = response.json()

    # Create the items
    response = requests.post(url + '/item', json={'type': area_type['id'], 'static_properties': {'name': 'Parco Belvedere', 'rough_path': True, 'area': { "type": "Polygon", "coordinates": [ [ [ 8.891968081548349, 44.420925557767191 ], [ 8.891995209786821, 44.420907956269978 ], [ 8.89204850148305, 44.42089180199681 ], [ 8.892098111544856, 44.420896620437283 ], [ 8.892135319451892, 44.420951121860917 ], [ 8.892192857415207, 44.420948385525264 ], [ 8.892223282710454, 44.420866219927191 ], [ 8.892274396608681, 44.420804780042928 ], [ 8.892339857917481, 44.42079682957894 ], [ 8.892381088636157, 44.420986284790153 ], [ 8.892465265798656, 44.421047402440927 ], [ 8.892524214755408, 44.42102882256745 ], [ 8.892838820718438, 44.421065309841367 ], [ 8.893015956485796, 44.421194754793262 ], [ 8.893097625619735, 44.421254024071395 ], [ 8.893179294918685, 44.421313293290687 ], [ 8.893263476915267, 44.421372474779822 ], [ 8.893274291372011, 44.421380074169754 ], [ 8.893278168019805, 44.421382796610438 ], [ 8.8932807649699, 44.421384635589632 ], [ 8.893284189999745, 44.421387024507936 ], [ 8.893286887329985, 44.421388926599796 ], [ 8.893291930686409, 44.421392496384634 ], [ 8.893294803653015, 44.421394524678327 ], [ 8.893297049414526, 44.421396066239879 ], [ 8.893301678986815, 44.421399221513596 ], [ 8.893332692002488, 44.421421109059523 ], [ 8.89334793544249, 44.421431656465323 ], [ 8.893387983290108, 44.421431333864724 ], [ 8.893427716812481, 44.421410484864047 ], [ 8.893439171632362, 44.421404472797825 ], [ 8.893467450306616, 44.421389635849422 ], [ 8.893498491508815, 44.421382282698417 ], [ 8.893516077434214, 44.421382659253702 ], [ 8.893541054852886, 44.42139402597747 ], [ 8.893592356630645, 44.421435936358414 ], [ 8.893643658481684, 44.421477846716073 ], [ 8.893730606513911, 44.421536085162501 ], [ 8.893793370279331, 44.421561261180493 ], [ 8.8938719758013, 44.421578889687325 ], [ 8.894083622218945, 44.421590880271786 ], [ 8.894145018564553, 44.421608222499991 ], [ 8.894224196494502, 44.421656730459794 ], [ 8.894277162312896, 44.421681897108307 ], [ 8.894315337009084, 44.421689404767399 ], [ 8.894334804064982, 44.421691583477021 ], [ 8.894356158499164, 44.421692053427051 ], [ 8.894373747938102, 44.421690539292534 ], [ 8.894390712532458, 44.42168722404142 ], [ 8.894408186591443, 44.421680038111553 ], [ 8.89442182991492, 44.421672488519945 ], [ 8.894428935924786, 44.421667768706662 ], [ 8.89443195476392, 44.421665565851328 ], [ 8.894437490452917, 44.421660889594847 ], [ 8.89443975890873, 44.421656840495892 ], [ 8.894439767359476, 44.421652159114551 ], [ 8.894584378849112, 44.421360246428996 ], [ 8.894138856369999, 44.421334445521602 ], [ 8.894147231456014, 44.42121849889179 ], [ 8.89409988028412, 44.4212146737366 ], [ 8.894065698304065, 44.421222294209194 ], [ 8.893995143649493, 44.42126796211587 ], [ 8.893962780680088, 44.42124227436431 ], [ 8.893882919389784, 44.421293875297131 ], [ 8.893870091296853, 44.42130214579857 ], [ 8.893678297752324, 44.421149731672593 ], [ 8.893692005818972, 44.421141101907217 ], [ 8.893580242607586, 44.421051781016018 ], [ 8.893584677726528, 44.421030628881063 ], [ 8.89352082389224, 44.420983575232377 ], [ 8.893520913556753, 44.42093433069715 ], [ 8.893498068227222, 44.420924946550436 ], [ 8.89347601514706, 44.420894406859546 ], [ 8.893459737698612, 44.420865403023221 ], [ 8.893474710267487, 44.420852183103612 ], [ 8.893355103857026, 44.420793463737041 ], [ 8.893359845595786, 44.420741972889338 ], [ 8.893375513867351, 44.420691662621344 ], [ 8.893387968656134, 44.420681411236963 ], [ 8.893536885202064, 44.420648330715991 ], [ 8.893593450794745, 44.420627497392452 ], [ 8.89364924774798, 44.420614855755467 ], [ 8.893930624854296, 44.420582978692622 ], [ 8.893972651810712, 44.420578516501038 ], [ 8.893631217858058, 44.420513378785614 ], [ 8.893381549059063, 44.420481905987856 ], [ 8.893315758362702, 44.420464109094837 ], [ 8.893240750867795, 44.42047196114126 ], [ 8.89302541358132, 44.4204885039997 ], [ 8.892776680332991, 44.420563622410526 ], [ 8.892555844138117, 44.420632914869522 ], [ 8.892326303716962, 44.42072182449688 ], [ 8.892116233664263, 44.42087863226395 ], [ 8.892059965066229, 44.420874257652976 ], [ 8.892051947275254, 44.420862483558665 ], [ 8.891964672892451, 44.420846349018611 ], [ 8.891968081548349, 44.420925557767191 ] ] ] }}})
    area = response.json()

    response = requests.post(url + '/item', json={'type': user_type['id'], 'static_properties': {'name': 'Alice'}})
    user = response.json()

if __name__ == '__main__':
    url = sys.argv[1] if len(sys.argv) > 1 else 'http://localhost:8080'
    init_db(url)