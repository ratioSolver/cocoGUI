{
    "components": {
        "schemas": {
            "agent_timeline": {
                "description": "Schema representing an agent timeline",
                "properties": {
                    "id": {
                        "description": "The ID of the agent",
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name of the agent",
                        "type": "string"
                    },
                    "type": {
                        "enum": [
                            "Agent"
                        ],
                        "type": "string"
                    },
                    "values": {
                        "description": "Array of atom IDs",
                        "items": {
                            "type": "integer"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "id",
                    "type",
                    "name"
                ],
                "type": "object"
            },
            "atom": {
                "properties": {
                    "exprs": {
                        "additionalProperties": {
                            "$ref": "#/components/schemas/value"
                        },
                        "type": "object"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "is_fact": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "sigma": {
                        "type": "integer"
                    },
                    "status": {
                        "enum": [
                            "Active",
                            "Inactive",
                            "Unified"
                        ],
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "is_fact",
                    "sigma",
                    "type",
                    "name",
                    "status"
                ],
                "type": "object"
            },
            "bool_value": {
                "properties": {
                    "lit": {
                        "type": "string"
                    },
                    "type": {
                        "enum": [
                            "bool"
                        ],
                        "type": "string"
                    },
                    "val": {
                        "enum": [
                            "True",
                            "False",
                            "Undefined"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "lit",
                    "val"
                ],
                "type": "object"
            },
            "coco_item": {
                "properties": {
                    "id": {
                        "format": "uuid",
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "properties": {
                        "type": "object"
                    },
                    "type": {
                        "format": "uuid",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "coco_rule": {
                "properties": {
                    "content": {
                        "type": "string"
                    },
                    "id": {
                        "format": "uuid",
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "content"
                ],
                "type": "object"
            },
            "coco_type": {
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "dynamic_properties": {
                        "additionalProperties": {
                            "$ref": "#/components/schemas/property"
                        },
                        "type": "object"
                    },
                    "id": {
                        "format": "uuid",
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "parents": {
                        "items": {
                            "format": "uuid",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "static_properties": {
                        "additionalProperties": {
                            "$ref": "#/components/schemas/property"
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "consumable_resource_timeline": {
                "properties": {
                    "capacity": {
                        "$ref": "#/components/schemas/inf_rational"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "initial_amount": {
                        "$ref": "#/components/schemas/inf_rational"
                    },
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "enum": [
                            "ConsumableResource"
                        ],
                        "type": "string"
                    },
                    "values": {
                        "items": {
                            "$ref": "#/components/schemas/consumable_resource_timeline_value"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "id",
                    "type",
                    "name",
                    "capacity",
                    "initial_amount"
                ],
                "type": "object"
            },
            "consumable_resource_timeline_value": {
                "properties": {
                    "atoms": {
                        "items": {
                            "type": "integer"
                        },
                        "type": "array"
                    },
                    "end": {
                        "$ref": "#/components/schemas/inf_rational"
                    },
                    "from": {
                        "$ref": "#/components/schemas/inf_rational"
                    },
                    "start": {
                        "$ref": "#/components/schemas/inf_rational"
                    },
                    "to": {
                        "$ref": "#/components/schemas/inf_rational"
                    }
                },
                "required": [
                    "from",
                    "to",
                    "start",
                    "end"
                ],
                "type": "object"
            },
            "data": {
                "properties": {
                    "data": {
                        "type": "object"
                    },
                    "timestamp": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "enum_value": {
                "properties": {
                    "type": {
                        "enum": [
                            "enum"
                        ],
                        "type": "string"
                    },
                    "vals": {
                        "items": {
                            "type": "integer"
                        },
                        "type": "array"
                    },
                    "var": {
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "var",
                    "vals"
                ],
                "type": "object"
            },
            "error": {
                "properties": {
                    "message": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "flaw": {
                "properties": {
                    "causes": {
                        "description": "The resolvers that caused this flaw.",
                        "items": {
                            "type": "integer"
                        },
                        "type": "array"
                    },
                    "cost": {
                        "$ref": "#/components/schemas/rational"
                    },
                    "data": {
                        "type": "object"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "phi": {
                        "type": "string"
                    },
                    "pos": {
                        "type": "integer"
                    },
                    "state": {
                        "enum": [
                            "active",
                            "forbidden",
                            "inactive"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "causes",
                    "state",
                    "pos",
                    "phi",
                    "cost"
                ],
                "type": "object"
            },
            "float_property": {
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "max": {
                        "type": "number"
                    },
                    "min": {
                        "type": "number"
                    },
                    "type": {
                        "enum": [
                            "float"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "inf_rational": {
                "properties": {
                    "den": {
                        "type": "integer"
                    },
                    "inf": {
                        "$ref": "#/components/schemas/rational"
                    },
                    "num": {
                        "type": "integer"
                    }
                },
                "required": [
                    "num",
                    "den"
                ],
                "type": "object"
            },
            "int_value": {
                "properties": {
                    "lb": {
                        "$ref": "#/components/schemas/inf_rational"
                    },
                    "lin": {
                        "type": "string"
                    },
                    "type": {
                        "enum": [
                            "int"
                        ],
                        "type": "string"
                    },
                    "ub": {
                        "$ref": "#/components/schemas/inf_rational"
                    },
                    "val": {
                        "$ref": "#/components/schemas/inf_rational"
                    }
                },
                "required": [
                    "type",
                    "lin",
                    "val"
                ],
                "type": "object"
            },
            "integer_property": {
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "max": {
                        "type": "integer"
                    },
                    "min": {
                        "type": "integer"
                    },
                    "type": {
                        "enum": [
                            "integer"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "item": {
                "properties": {
                    "exprs": {
                        "additionalProperties": {
                            "$ref": "#/components/schemas/value"
                        },
                        "type": "object"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "type",
                    "name"
                ],
                "type": "object"
            },
            "item_property": {
                "properties": {
                    "default": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "description": {
                        "type": "string"
                    },
                    "multiple": {
                        "type": "boolean"
                    },
                    "type": {
                        "enum": [
                            "item"
                        ],
                        "type": "string"
                    },
                    "type_id": {
                        "format": "uuid",
                        "type": "string"
                    },
                    "values": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "type",
                    "type_id"
                ],
                "type": "object"
            },
            "item_value": {
                "properties": {
                    "type": {
                        "enum": [
                            "item"
                        ],
                        "type": "string"
                    },
                    "val": {
                        "type": "integer"
                    }
                },
                "required": [
                    "type",
                    "val"
                ],
                "type": "object"
            },
            "json_property": {
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "schema": {
                        "type": "object"
                    },
                    "type": {
                        "enum": [
                            "json"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "schema"
                ],
                "type": "object"
            },
            "property": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/integer_property"
                    },
                    {
                        "$ref": "#/components/schemas/float_property"
                    },
                    {
                        "$ref": "#/components/schemas/string_property"
                    },
                    {
                        "$ref": "#/components/schemas/symbol_property"
                    },
                    {
                        "$ref": "#/components/schemas/item_property"
                    },
                    {
                        "$ref": "#/components/schemas/json_property"
                    }
                ]
            },
            "rational": {
                "properties": {
                    "den": {
                        "type": "integer"
                    },
                    "num": {
                        "type": "integer"
                    }
                },
                "required": [
                    "num",
                    "den"
                ],
                "type": "object"
            },
            "real_value": {
                "properties": {
                    "lb": {
                        "$ref": "#/components/schemas/inf_rational"
                    },
                    "lin": {
                        "type": "string"
                    },
                    "type": {
                        "enum": [
                            "real"
                        ],
                        "type": "string"
                    },
                    "ub": {
                        "$ref": "#/components/schemas/inf_rational"
                    },
                    "val": {
                        "$ref": "#/components/schemas/inf_rational"
                    }
                },
                "required": [
                    "type",
                    "lin",
                    "val"
                ],
                "type": "object"
            },
            "resolver": {
                "properties": {
                    "data": {
                        "type": "object"
                    },
                    "flaw": {
                        "description": "The flaw this resolver solves.",
                        "type": "integer"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "intrinsic_cost": {
                        "$ref": "#/components/schemas/rational"
                    },
                    "pos": {
                        "type": "integer"
                    },
                    "preconditions": {
                        "description": "The preconditions that must be satisfied for this resolver to be applied.",
                        "items": {
                            "type": "integer"
                        },
                        "type": "array"
                    },
                    "rho": {
                        "type": "string"
                    },
                    "state": {
                        "enum": [
                            "active",
                            "forbidden",
                            "inactive"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "state",
                    "flaw",
                    "rho",
                    "pos",
                    "preconditions",
                    "intrinsic_cost"
                ],
                "type": "object"
            },
            "reusable_resource_timeline": {
                "properties": {
                    "capacity": {
                        "$ref": "#/components/schemas/inf_rational"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "enum": [
                            "ReusableResource"
                        ],
                        "type": "string"
                    },
                    "values": {
                        "items": {
                            "$ref": "#/components/schemas/reusable_resource_timeline_value"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "id",
                    "type",
                    "name",
                    "capacity"
                ],
                "type": "object"
            },
            "reusable_resource_timeline_value": {
                "properties": {
                    "atoms": {
                        "items": {
                            "type": "integer"
                        },
                        "type": "array"
                    },
                    "from": {
                        "$ref": "#/components/schemas/inf_rational"
                    },
                    "to": {
                        "$ref": "#/components/schemas/inf_rational"
                    },
                    "usage": {
                        "$ref": "#/components/schemas/inf_rational"
                    }
                },
                "required": [
                    "from",
                    "to",
                    "usage"
                ],
                "type": "object"
            },
            "solver": {
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "state": {
                        "enum": [
                            "reasoning",
                            "adapting",
                            "idle",
                            "executing",
                            "finished",
                            "failed"
                        ],
                        "type": "string"
                    },
                    "time": {
                        "$ref": "#/components/schemas/rational"
                    }
                },
                "type": "object"
            },
            "solver_graph": {
                "properties": {
                    "current_flaw": {
                        "type": "integer"
                    },
                    "current_resolver": {
                        "type": "integer"
                    },
                    "flaws": {
                        "items": {
                            "$ref": "#/components/schemas/flaw"
                        },
                        "type": "array"
                    },
                    "resolvers": {
                        "items": {
                            "$ref": "#/components/schemas/resolver"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "flaws",
                    "resolvers"
                ],
                "type": "object"
            },
            "solver_state": {
                "properties": {
                    "atoms": {
                        "items": {
                            "$ref": "#/components/schemas/atom"
                        },
                        "type": "array"
                    },
                    "exprs": {
                        "additionalProperties": {
                            "$ref": "#/components/schemas/value"
                        },
                        "type": "object"
                    },
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/item"
                        },
                        "type": "array"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ],
                "type": "object"
            },
            "solver_timeline": {
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "enum": [
                            "Solver"
                        ],
                        "type": "string"
                    },
                    "values": {
                        "items": {
                            "type": "integer"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "id",
                    "type",
                    "name"
                ],
                "type": "object"
            },
            "state_variable_timeline": {
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "enum": [
                            "StateVariable"
                        ],
                        "type": "string"
                    },
                    "values": {
                        "items": {
                            "$ref": "#/components/schemas/state_variable_timeline_value"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "id",
                    "type",
                    "name"
                ],
                "type": "object"
            },
            "state_variable_timeline_value": {
                "properties": {
                    "atoms": {
                        "items": {
                            "type": "integer"
                        },
                        "type": "array"
                    },
                    "from": {
                        "$ref": "#/components/schemas/inf_rational"
                    },
                    "to": {
                        "$ref": "#/components/schemas/inf_rational"
                    }
                },
                "required": [
                    "from",
                    "to",
                    "atoms"
                ],
                "type": "object"
            },
            "string_property": {
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "type": {
                        "enum": [
                            "string"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "string_value": {
                "properties": {
                    "type": {
                        "enum": [
                            "string"
                        ],
                        "type": "string"
                    },
                    "val": {
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "val"
                ],
                "type": "object"
            },
            "symbol_property": {
                "properties": {
                    "default": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "description": {
                        "type": "string"
                    },
                    "multiple": {
                        "type": "boolean"
                    },
                    "type": {
                        "enum": [
                            "symbol"
                        ],
                        "type": "string"
                    },
                    "values": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "time_value": {
                "properties": {
                    "lb": {
                        "$ref": "#/components/schemas/inf_rational"
                    },
                    "lin": {
                        "type": "string"
                    },
                    "type": {
                        "enum": [
                            "time"
                        ],
                        "type": "string"
                    },
                    "ub": {
                        "$ref": "#/components/schemas/inf_rational"
                    },
                    "val": {
                        "$ref": "#/components/schemas/inf_rational"
                    }
                },
                "required": [
                    "type",
                    "lin",
                    "val"
                ],
                "type": "object"
            },
            "timeline": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/solver_timeline"
                    },
                    {
                        "$ref": "#/components/schemas/agent_timeline"
                    },
                    {
                        "$ref": "#/components/schemas/state_variable_timeline"
                    },
                    {
                        "$ref": "#/components/schemas/reusable_resource_timeline"
                    },
                    {
                        "$ref": "#/components/schemas/consumable_resource_timeline"
                    }
                ]
            },
            "value": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/bool_value"
                    },
                    {
                        "$ref": "#/components/schemas/int_value"
                    },
                    {
                        "$ref": "#/components/schemas/real_value"
                    },
                    {
                        "$ref": "#/components/schemas/time_value"
                    },
                    {
                        "$ref": "#/components/schemas/string_value"
                    },
                    {
                        "$ref": "#/components/schemas/enum_value"
                    },
                    {
                        "$ref": "#/components/schemas/item_value"
                    }
                ]
            }
        }
    },
    "info": {
        "description": "The combined deduCtiOn and abduCtiOn (CoCo) API",
        "title": "CoCo API",
        "version": "1.0"
    },
    "openapi": "3.1.0",
    "paths": {
        "/": {
            "get": {
                "description": "Index page",
                "responses": {
                    "200": {
                        "description": "Index page"
                    }
                },
                "summary": "Index"
            }
        },
        "/assets/{file}": {
            "get": {
                "description": "Assets",
                "parameters": [
                    {
                        "in": "path",
                        "name": "file",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Index page"
                    }
                },
                "summary": "Assets"
            }
        },
        "/async_api": {
            "get": {
                "description": "Endpoint to fetch the AsyncAPI Specification document",
                "responses": {
                    "200": {
                        "description": "Successful response with AsyncAPI Specification document"
                    }
                },
                "summary": "Retrieve AsyncAPI Specification"
            }
        },
        "/data/{item_id}": {
            "get": {
                "description": "Endpoint to fetch the data of the specified item. The data can be filtered by specifying the start and end date",
                "parameters": [
                    {
                        "description": "ID of the item",
                        "in": "path",
                        "name": "item_id",
                        "required": true,
                        "schema": {
                            "format": "uuid",
                            "type": "string"
                        }
                    },
                    {
                        "description": "Start date for filtering data",
                        "in": "query",
                        "name": "from",
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "description": "End date for filtering data",
                        "in": "query",
                        "name": "to",
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/data"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Successful response with the data of the specified item"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Item not found"
                    }
                },
                "summary": "Retrieve the data of the specified item"
            },
            "post": {
                "description": "Endpoint to add data to the specified item",
                "parameters": [
                    {
                        "description": "ID of the item",
                        "in": "path",
                        "name": "item_id",
                        "required": true,
                        "schema": {
                            "format": "uuid",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful response"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Invalid input"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Item not found"
                    }
                },
                "summary": "Add data to the specified item"
            }
        },
        "/deliberative_rule": {
            "post": {
                "description": "Endpoint to create a new deliberative rule",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/coco_rule"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/coco_rule"
                                }
                            }
                        },
                        "description": "Successful response with the created deliberative rule"
                    }
                },
                "summary": "Create a new CoCo deliberative rule"
            }
        },
        "/deliberative_rule/{rule_id}": {
            "delete": {
                "description": "Endpoint to delete the given deliberative rule",
                "parameters": [
                    {
                        "in": "path",
                        "name": "rule_id",
                        "required": true,
                        "schema": {
                            "format": "uuid",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful response with the deleted deliberative rule"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Rule not found"
                    }
                },
                "summary": "Delete the given CoCo deliberative rule"
            }
        },
        "/deliberative_rules": {
            "get": {
                "description": "Endpoint to fetch all the managed deliberative rules",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/coco_rule"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Successful response with the stored deliberative rules"
                    }
                },
                "summary": "Retrieve all the CoCo deliberative rules"
            }
        },
        "/item": {
            "post": {
                "description": "Endpoint to create a new item",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/coco_item"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful response"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Invalid parameters"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Type not found"
                    }
                },
                "summary": "Create a new item"
            }
        },
        "/item/{item_id}": {
            "delete": {
                "description": "Endpoint to delete the given item",
                "parameters": [
                    {
                        "in": "path",
                        "name": "item_id",
                        "required": true,
                        "schema": {
                            "format": "uuid",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful response with the deleted item"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Item not found"
                    }
                },
                "summary": "Delete the given item"
            },
            "get": {
                "description": "Endpoint to fetch the given item",
                "parameters": [
                    {
                        "in": "path",
                        "name": "item_id",
                        "required": true,
                        "schema": {
                            "format": "uuid",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/coco_item"
                                }
                            }
                        },
                        "description": "Successful response with the given item"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Item not found"
                    }
                },
                "summary": "Retrieve the given item"
            },
            "put": {
                "description": "Endpoint to update the given item",
                "parameters": [
                    {
                        "in": "path",
                        "name": "item_id",
                        "required": true,
                        "schema": {
                            "format": "uuid",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/coco_item"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful response"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Item not found"
                    }
                },
                "summary": "Update the given item"
            }
        },
        "/items": {
            "get": {
                "description": "Endpoint to fetch all the managed items. The items can be filtered by specifying the type ID",
                "parameters": [
                    {
                        "in": "query",
                        "name": "type_id",
                        "required": false,
                        "schema": {
                            "format": "uuid",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/coco_item"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Successful response with the stored items"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Invalid parameters"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Type not found"
                    }
                },
                "summary": "Retrieve all the CoCo items"
            }
        },
        "/open_api": {
            "get": {
                "description": "Endpoint to fetch the OpenAPI Specification document",
                "responses": {
                    "200": {
                        "description": "Successful response with OpenAPI Specification document"
                    }
                },
                "summary": "Retrieve OpenAPI Specification"
            }
        },
        "/reactive_rule": {
            "post": {
                "description": "Endpoint to create a new reactive rule",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/coco_rule"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/coco_rule"
                                }
                            }
                        },
                        "description": "Successful response with the created reactive rule"
                    }
                },
                "summary": "Create a new CoCo reactive rule"
            }
        },
        "/reactive_rule/{rule_id}": {
            "delete": {
                "description": "Endpoint to delete the given reactive rule",
                "parameters": [
                    {
                        "in": "path",
                        "name": "rule_id",
                        "required": true,
                        "schema": {
                            "format": "uuid",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful response with the deleted reactive rule"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Rule not found"
                    }
                },
                "summary": "Delete the given CoCo reactive rule"
            }
        },
        "/reactive_rules": {
            "get": {
                "description": "Endpoint to fetch all the managed reactive rules",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/coco_rule"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Successful response with the stored reactive rules"
                    }
                },
                "summary": "Retrieve all the CoCo reactive rules"
            }
        },
        "/type": {
            "post": {
                "description": "Endpoint to create a new type",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/coco_type"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/coco_type"
                                }
                            }
                        },
                        "description": "Successful response"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Invalid parameters"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Parent type not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Type already exists"
                    }
                },
                "summary": "Create a new type"
            }
        },
        "/type/{type_id}": {
            "delete": {
                "description": "Endpoint to delete the given type",
                "parameters": [
                    {
                        "in": "path",
                        "name": "type_id",
                        "required": true,
                        "schema": {
                            "format": "uuid",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful response with the deleted type"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Invalid parameters"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Type not found"
                    }
                },
                "summary": "Delete the given type"
            },
            "get": {
                "description": "Endpoint to fetch the given type",
                "parameters": [
                    {
                        "in": "path",
                        "name": "type_id",
                        "required": true,
                        "schema": {
                            "format": "uuid",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/coco_type"
                                }
                            }
                        },
                        "description": "Successful response with the given type"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Type not found"
                    }
                },
                "summary": "Retrieve the given type"
            },
            "put": {
                "description": "Endpoint to update the given type",
                "parameters": [
                    {
                        "in": "path",
                        "name": "type_id",
                        "required": true,
                        "schema": {
                            "format": "uuid",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/coco_type"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/coco_type"
                                }
                            }
                        },
                        "description": "Successful response"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Invalid parameters"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Type not found"
                    }
                },
                "summary": "Update the given type"
            }
        },
        "/types": {
            "get": {
                "description": "Endpoint to fetch all the managed types",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/coco_type"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Successful response with the stored types"
                    }
                },
                "summary": "Retrieve all the CoCo types"
            }
        }
    },
    "servers": [
        {
            "url": "http://0.0.0.0:8081"
        }
    ]
}